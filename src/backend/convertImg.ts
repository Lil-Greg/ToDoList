import defaultPfp from "../../public/defaultPfp.png";

// Just gonna Convert it To a URL
export function convertImgToURL(imgFile: File): Promise<string> {

    // console.log("Image Size (Base)", imgFile.size);
    // console.log("Image Size as MB ->", imgFile.size / (1024 * 1024));
    // const reader = new FileReader();
    // reader.onload = (event) => {
    //     console.log("reader onload", event.target?.result);
    // }
    // console.log("Image as Data URL", reader.readAsDataURL(imgFile));

    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = (event) => {
            if (event.target?.result) {
                resolve(event.target.result as string);
            } else {
                reject(new Error("Failed to read image file"));
            }
        };

        reader.onerror = () => reject(new Error("Error reading the file"));
        reader.readAsDataURL(imgFile);
    });
}
// export function convertBlobToFile(imgFile) {

// }
export async function getLocalImage(): Promise<File> {
    const response = await fetch(defaultPfp);
    const blob = await response.blob();
    return new File([blob], "defaultPfp.png", { type: blob.type });
}

//Generated by ChatGPT
export async function resizeImage(file: File, width: number, height: number): Promise<File> {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();

        reader.onload = (event) => {
            if (!event.target?.result) {
                return reject(new Error("Failed to load image"));
            }

            const img = new Image();
            img.onload = () => {
                // Create a canvas to resize the image
                const canvas = document.createElement("canvas");
                canvas.width = width;
                canvas.height = height;

                const ctx = canvas.getContext("2d");
                if (!ctx) {
                    return reject(new Error("Failed to get canvas context"));
                }

                // Draw the image onto the canvas with the desired size
                ctx.drawImage(img, 0, 0, width, height);

                // Convert canvas back to Blob and create a new File
                canvas.toBlob((blob) => {
                    if (blob) {
                        const resizedFile = new File([blob], file.name, { type: "image/png" });
                        resolve(resizedFile);
                    } else {
                        reject(new Error("Failed to convert canvas to Blob"));
                    }
                }, "image/png");
            };

            img.onerror = () => reject(new Error("Failed to load image"));
            img.src = event.target.result as string;
        };

        reader.onerror = () => reject(new Error("Failed to read file"));
        reader.readAsDataURL(file);
    });
}
